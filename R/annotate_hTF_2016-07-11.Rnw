\documentclass[11pt]{article}
\usepackage{graphicx, verbatim}
\usepackage{caption}
\usepackage{hyperref}
\usepackage{url}
\setlength{\textwidth}{6.5in} 
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in} 
\setlength{\evensidemargin}{0in}
\setlength{\topmargin}{-1.5cm}

<<load_lib,include=FALSE,results="hide">>=
library(biomaRt)
library(data.table)
library(doMC)
library(ggplot2)
library(NMF)
library(org.Hs.eg.db)
library(plyr)
library(stringr)
library(tidyr)
library(R.utils)
library(UniProt.ws)
library(Vennerable)
source("get_file_paths.R")
@

<<set_file_path,echo=FALSE>>=
this_analysis_path = file.path(PROJ_RESULTS_PATH,"annotate_hTF_2016-07-11")
rdata_prefix = file.path(this_analysis_path,'annotate_hTF_2016-07-11-')
prefix.string = file.path(this_analysis_path,"graphics","annotate_hTF_2016-07-11-")
step_list = ""
@

\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
# set global chunk options
opts_chunk$set(cache = TRUE) # enable cache to make it faster
opts_chunk$set(fig.path=prefix.string, fig.align='center', fig.show='hold',
               eval=TRUE,echo=TRUE,include=TRUE,
               cache.path="cache/annotate_hTF_2016-07-11-")

knit_hooks$set(checkpoint = function(before, options, envir) {
  # e.g. we skip all chunks after the chunk example-b
  if (!before && options$label == options$checkpoint) {
    opts_chunk$set(cache = FALSE, eval = FALSE, echo = FALSE, include = FALSE)
    # you can do other things like dumping `envir` into globalenv(), e.g.
    # assign('ChunkEnv', envir, envir = globalenv())
  }
})
## set checkpoint=NULL to disable checkpoints
opts_chunk$set(checkpoint = 'sessionInfo') # restore objects up to exmple-b
## now if you knit() this document, only x exists; y is not loaded
@

\title{Annotate human TF clones}
\date{July 11, 2016}

\maketitle

\section{Settings}

\begin{itemize}
\item This analysis was run on \Sexpr{System$getHostname()}.
\end{itemize}

<<setup_parallel>>=
registerDoMC(32)
getDoParWorkers()
@

<<read_annot>>=
# PANTHER protein families
pthr_class = fread('/gale/netapp/home/shhuang/data/PANTHER/hmm_classifications/9.0/PANTHER9.0_HMM_classifications')
setnames(pthr_class,c("PTHR_ID","PTHR_Name","MF","BP","CC","Class","Pathway"))

# TF class annotation by TFClass database (Wingender et al NAR 2013)
tf_class = fread('/gale/netapp/home/shhuang/data/human/TFClass/TFClass_ontologies_20160725/TFClass_human_table.txt')

## various plasmid collections available at ASU, July 2016 (DNASU.org)
# ORFeome collection v8.1
orfeome_table = fread('/gale/netapp/home/shhuang/data/DNASU/Human_ORFeome_v8.1/Clones-LF.txt')
setnames(orfeome_table,c("Clone ID","Gene ID","Gene Symbol","Gene Name","Reference Sequence Genbank Accession","Reference Sequence GI"),
         c("CloneID","GeneID","GeneSymbol","GeneName","GenbankAccession","GI"))
# breat cancer 1000 
bc1000_table = fread('/gale/netapp/home/shhuang/data/DNASU/Human_BC1000/BC1000_pDNRdual_complete_clones.tsv')
setnames(bc1000_table,c("Clone ID","Gene ID"),c("CloneID","GeneID"))
# human expression plasmids
hExpr_table = fread('/gale/netapp/home/shhuang/data/DNASU/Human_expression/hGenes_expr_complete_clones.tsv')
setnames(hExpr_table,c("Clone ID","Gene ID"),c("CloneID","GeneID"))
# human TF 
hTF_table = fread('/gale/netapp/home/shhuang/data/DNASU/Human_TF/hTF_lenti_clones.tsv')
setnames(hTF_table,c("Clone ID","Gene ID"),c("CloneID","GeneID"))
# PSI:Biology-MR plasmids
psibiol_table = fread('/gale/netapp/home/shhuang/data/DNASU/PSI_biology/PSI_biology_clones.tsv')
setnames(psibiol_table,c("Clone ID","Gene ID"),c("CloneID","GeneID"))
# PSI-2 plasmids
psi_table = fread('/gale/netapp/home/shhuang/data/DNASU/PSI/PSI_clones.txt')
setnames(psi_table,c("Clone ID","Gene ID"),c("CloneID","GeneID"))

# ENCODE DREAM challenge TFs
enc_tfs = fread('/gale/netapp/home/shhuang/devel/dap_hs/metadata/encode_dream_tfs_2016-06-21.txt',
                header=FALSE)
enc_h1_tfs = fread('/gale/netapp/home/shhuang/devel/dap_hs/metadata/encode_dream_tfs_H1_2016-06-21.txt',
                   header=FALSE)
@ 

<<tf_info>>=
# clones batch 1 sent by ASU, June 2016
hTF_clones = fread(file.path(PROJ_DEVEL_PATH,'metadata','hTFclones-LF.txt'))
hTF_clones_split = separate_rows(hTF_clones,GeneID,sep='//')

ensembl84 = useMart(host='mar2016.archive.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset='hsapiens_gene_ensembl')

# annotation of hTF clones using GeneID
hTF_eg_ens = getBM(attributes=c("ensembl_gene_id","entrezgene","description"),
                   filters="entrezgene",values=hTF_clones_split[,GeneID],
                   mart=ensembl84,uniqueRows=TRUE)
hTF_eg_ens = within(hTF_eg_ens, { entrezgene=as.character(entrezgene) })

# annotation of hTF clones using RefSeq
hTF_rs_ens = getBM(attributes=c("ensembl_gene_id","refseq_peptide","description"),
                   filters="refseq_peptide",values=hTF_clones[,RefSeq_Acc],
                   mart=ensembl84,uniqueRows=TRUE)
#hTF_rs_ens = within(hTF_rs_ens, { entrezgene=as.character(entrezgene) })

# with GeneID to Ensembl gene mapping
hTF_annot1 = merge(hTF_clones_split[,list(DNASU_CloneID,RefSeq_Acc,GeneID,GeneSymbol)],hTF_eg_ens,by.x="GeneID",by.y="entrezgene")
# with RefSeq to Ensembl gene mapping
hTF_annot2 = merge(hTF_clones_split[,list(DNASU_CloneID,RefSeq_Acc,GeneID,GeneSymbol)],hTF_rs_ens,by.x="RefSeq_Acc",by.y="refseq_peptide")
x# with GeneID and/or Refseq to Ensembl gene mapping
hTF_annot3 = merge(hTF_annot1,hTF_annot2,
                  by=c("ensembl_gene_id","GeneID","RefSeq_Acc","GeneSymbol","description"),
                  all=TRUE,suffixes=c(".eg",".rs"),
                  )

# primary is mapping by EntrezGene; if not, use mapping by RefSeq
hTF_annot3 = hTF_annot3[,DNASU_CloneID:=ifelse(is.na(DNASU_CloneID.eg),DNASU_CloneID.rs,DNASU_CloneID.eg)]
# condensed to unique; this has Ensembl ID mappings for all the clones!!!
hTF_annot4 = unique(hTF_annot3[,list(DNASU_CloneID,ensembl_gene_id,GeneID,RefSeq_Acc,GeneSymbol,description)])
@ 

<<add_annot1>>=
# add CIS-BP annotation by Ensembl Gene ID, description field is NA if TF is not in the hTF clone set
hTF_annot5 = merge(hTF_annot4,cisbp_tf_info1,
                   by.x="ensembl_gene_id",by.y="DBID",
                   all.x=TRUE)
# this should be true, since all clones were mapped to ensembl_gene_id
setequal(hTF_clones[,DNASU_CloneID],hTF_annot5[,DNASU_CloneID])

# How many clones do not have CIS-BP annotation?
hTF_annot5[,list(Family_Name=unique(Family_Name)),by="DNASU_CloneID"][,.N,by=is.na(Family_Name)]
@

<<add_multi_annot>>=
# add CIS-BP annotation by Ensembl Gene ID, description field is NA if TF is not in the hTF clone set
hTF_annot52 = merge(hTF_annot4,cisbp_tf_info1,
                   by.x="ensembl_gene_id",by.y="DBID",
                   all=TRUE)
# add TFClass annotation by Ensembl Gene ID, description field is NA if TF is not in the hTF clone set
hTF_annot53 = merge(hTF_annot52,tf_class,
                    by.x="ensembl_gene_id",by.y="ENSEMBL",
                    all=TRUE)

# consolidate CIS-BP and TFClass annotations
hTF_annot72 = ddply(hTF_annot53,c("DNASU_CloneID","GeneID","RefSeq_Acc","GeneSymbol"),function(df) {
    idx = which(!is.na(df[,'TF_Name'])) # TRUE==has CIS-BP annotation
    if (length(idx)==0) { # does not have CIS-BP annotation
        idx = which(is.na(df[,'TF_Name']) & !is.na(df[,'Class']))
        if (length(idx)==0) { # no annoation from either CIS-BP or TFClass, just get the empty values
            idx = which(is.na(df[,'TF_Name']))[1]
        }
    } 
    unique(df[idx,])
})    

# get description for CISBP or TFClass genes that do not have overlap with ASU clones
print(length(subset(hTF_annot72,is.na(description))[,'ensembl_gene_id'])) # number of genes do not overlap with ASU clones
print(length(unique(subset(hTF_annot72,is.na(description))[,'ensembl_gene_id']))) # number of genes do not overlap with ASU clones

hTF_annot72_desc = getBM(attributes=c("ensembl_gene_id","description"),
                         filters="ensembl_gene_id",values=subset(hTF_annot72,is.na(description))[,'ensembl_gene_id'],
                         mart=ensembl84)
hTF_annot72 = merge(hTF_annot72,hTF_annot72_desc,by.x="ensembl_gene_id",by.y="ensembl_gene_id",
                    all.x=TRUE,suffixes=c('.ASUCloneT','.ASUCloneF'))

# how many genes not overlap with ASU clones are still not annotated?
print(length(subset(hTF_annot72,is.na(description.ASUCloneT) & is.na(description.ASUCloneF))[,'ensembl_gene_id']))
print(length(unique(subset(hTF_annot72,is.na(description.ASUCloneT) & is.na(description.ASUCloneF))[,'ensembl_gene_id'])))

hTF_annot72 = hTF_annot72[with(hTF_annot72,order(is.na(DNASU_CloneID),is.na(TF_Name),is.na(Class))),]

write.table(hTF_annot72,paste0(rdata_prefix,'all_annot.txt'),sep='\t',quote=FALSE,row.names=FALSE)
@ 

\section{Venn diagrams of overlap}

<<tf_annot_venn>>=
tf_annot_list = list('ASU'=unique(hTF_annot4[,ensembl_gene_id]),
                     'CISBP'=unique(cisbp_tf_info1[,DBID]),
                     'TFClass'=unique(tf_class[,ENSEMBL]))
Vtf = Venn(tf_annot_list)

plot(Vtf)
@

\section{TF overlap with all ASU ORFeome, based on Entrez ID}

<<tftotal_ens>>=
# current version
#ensembl = useMart("ensembl",dataset='hsapiens_gene_ensembl')
up = UniProt.ws(taxId=9606)
# archives
ensembl_h37 = useMart(host='grch37.ensembl.org', biomart='ENSEMBL_MART_ENSEMBL', dataset='hsapiens_gene_ensembl')

ens_ids = cisbp_tf_info1[,DBID]
# annotation of CIS-BP TFs using Ensembl gene ID
cisbp_ens = getBM(attributes=c("ensembl_gene_id","entrezgene","refseq_peptide"),
                  filters="ensembl_gene_id",values=ens_ids,mart=ensembl_h37)
cisbp_ens = within(cisbp_ens,{ entrezgene=as.character(entrezgene) })

cisbp_add = merge(cisbp_tf_info1,cisbp_ens,by.x="DBID",by.y="ensembl_gene_id",all.x=TRUE) # unmapped TFs have NA in entrezgene field
# mar 2016 (84): 119
# GRCh37: 99
# dec 2015: 119
# dec 2014: 119
# dec 2013: 99

# map those unmapped by ensemble gene id by UniProt
# did not get any UniProt IDs mapped
#cisbp_up = select(up,keys=cisbp_add[is.na(entrezgene),DBID],columns=c("ENTREZ_GENE"),keytype="UNIPROTKB")
#cisbp_up = select(org.Hs.eg.db,keys=cisbp_add[is.na(entrezgene),DBID],columns=c("ENTREZID"),keytype="UNIPROT")
cisbp_comb = cisbp_add

# did we preserve all the genes in the origninal table
setequal(cisbp_tf_info1[,DBID],cisbp_comb[,DBID])
# how many genes are unmapped?
cisbp_comb[is.na(entrezgene),]

tf_class_ens = getBM(attributes=c("ensembl_gene_id","entrezgene"),
                     filters="ensembl_gene_id",values=tf_class[,ENSEMBL],mart=ensembl_h37)
tf_class_add = merge(tf_class,tf_class_ens,by.x="ENSEMBL",by.y="ensembl_gene_id",all.x=TRUE) # unmapped TFs have NA in entrezgene field
# number unmapped
# jul 2016 (current version): 77: 
# mar 2016: 77
# dec 2015: 75
# jul 2015: 75
# may 2015: 76
# mar 2015: 100
# dec 2014: 81
# oct 2014: 79
# aug 2014: 69
# GRCh37 (feb 2014): 52
# dec 2013: 52
# sep 2013: 51
# may 2012: 58
# may 2009: 704

tf_class_up = select(up,keys=tf_class_add[is.na(entrezgene),UNIPROT_HUMAN],columns=c("ENTREZ_GENE"),keytype="UNIPROTKB")

tf_class_add2 = merge(tf_class,tf_class_up,by.x='UNIPROT_HUMAN',by.y='UNIPROTKB') # only get those mapped by UniProt

tf_class_cols = colnames(tf_class)
# combining
tf_class_comb = rbind(tf_class_add[!is.na(entrezgene),c(tf_class_cols,"entrezgene"),with=FALSE],
                      tf_class_add2[,entrezgene:=ENTREZ_GENE][,c(tf_class_cols,"entrezgene"),with=FALSE])

# did we preserve all the genes in the origninal table
setequal(tf_class[,ENSEMBL],tf_class_comb[,ENSEMBL])
# how many genes are unmapped?
tf_class_comb[is.na(entrezgene),]

#y = select(org.Hs.eg.db,keys=tf_class_add[is.na(entrezgene),UNIPROT_HUMAN],columns=c("ENTREZID"),keytype="UNIPROT")
#z = select(org.Hs.eg.db,keys=tf_class[,ENSEMBL],columns=c("ENTREZID"),keytype="ENSEMBL")
#z_add = merge(tf_class,z,by.x="ENSEMBL",by.y="ENSEMBL",all.x=TRUE)
#zz = select(org.Hs.eg.db,keys=z_add[is.na(ENTREZID),UNIPROT_HUMAN],columns=c("ENTREZID"),keytype="UNIPROT")
@ 

<<orfeom_venn,fig.cap="Overlapping numbers are by Entrez Gene ID">>=
par(mfrow=c(2,2))
orfeome_venn_list = list('ASUsent'=unique(hTF_annot4[,GeneID]),
                     'TFClass+CISBP'=unique(c(tf_class_comb[!is.na(entrezgene),entrezgene],
                                              cisbp_comb[!is.na(entrezgene),entrezgene])),
                     'ORFeome'=unique(orfeome_table[!is.na(GeneID),GeneID]))

Vtf2 = Venn(orfeome_venn_list)
plot(Vtf2)

other_clones_list = list('hTF_lenti'=unique(hTF_table[,GeneID]),
                         'hExpr'=unique(hExpr_table[,GeneID]),
                         'BC1000'=unique(bc1000_table[,GeneID]),
                         'PSIBiol'=unique(psibiol_table[,GeneID]),
                         'PSI'=unique(psi_table[,GeneID]))

for (i in seq_along(other_clones_list)) {
    li = other_clones_list[i]
    vl = c(orfeome_venn_list,li)
    print(names(vl))
    Vtf3 = Venn(vl)
    plot(Vtf3,type="ellipses")
}
@

The clones sent by ASU (``ASUsent'' covers about 70\% of the TFs in TFClass+CISBP annotation.  Another ~200 will be covered by the ORFeome collection that they have promised to send (looks like most are homeoboxes and zinc fingers).  The PSI:Biology set is the collection that will increase the coverage the most (180 genes; most are zinc fingers). 

<<tftotal_hm,fig.width=3,fig.height=6>>=
tftotal_eg = unique(c(tf_class_comb[!is.na(entrezgene),entrezgene],cisbp_comb[!is.na(entrezgene),entrezgene]))
tftotal_eg2 = unique(c(tf_class_ens[,'entrezgene'],cisbp_ens[,'entrezgene']))

tftotal_mat = data.table(entrezgene=tftotal_eg,
                       ASUsent=tftotal_eg %in% hTF_annot4[,GeneID],
                       ORFeome=tftotal_eg %in% orfeome_table[,GeneID],
                       hTF_lenti=tftotal_eg %in% hTF_table[,GeneID],
                       hExpr=tftotal_eg %in% hExpr_table[,GeneID],
                       BC1000=tftotal_eg %in% bc1000_table[,GeneID],
                       PSI_Biology=tftotal_eg %in% psibiol_table[,GeneID],
                       PSI=tftotal_eg %in% psi_table[,GeneID])

tftotal_mat = tftotal_mat[with(tftotal_mat, order(-ASUsent,-ORFeome,-PSI_Biology,-hTF_lenti,-hExpr,-BC1000,-PSI)),]

#pdf(paste0(prefix.string,'TFClass_DNASU.pdf'),width=3,height=6)
aheatmap(data.matrix(tftotal_mat[,list(ASUsent,ORFeome,PSI_Biology,hTF_lenti,hExpr,BC1000,PSI)]),
         Colv=NA,Rowv=NA,labRow=NA)
#dev.off()
@ 

<<tftotal_psi_annot>>=
tftotal_psi = tftotal_mat[entrezgene %in% tftotal_mat[!ASUsent & !ORFeome & PSI_Biology,entrezgene]]

tftotal_psi_annot = getBM(attributes=c("entrezgene","hgnc_symbol","description"),
                           filters="entrezgene",values=tftotal_psi[,entrezgene],
                           mart=ensembl_h37)

psibiol_tf = psibiol_table[GeneID %in% tftotal_psi[,entrezgene],]

write.table(psibiol_tf,
            paste0(rdata_prefix,'psibiol_tf.txt'),sep='\t',quote=FALSE,col.names=TRUE,row.names=FALSE)
@ 


\section{Find the 200+ clones to request from ASU}
Goal is to get as many as possible, based on mappings from Ensembl Gene ID, Entrez Gene ID, RefSeq peptide and UniProt

<<orfeome_miss>>=
orfeome_tftotal = orfeome_table[,GeneID_TF:=GeneID %in% tftotal_eg]

# get Gene Symbol and alias
tftotal_symb = select(org.Hs.eg.db,keys=tftotal_eg,
                      columns=c("SYMBOL","ALIAS"),keytype="ENTREZID")

orfeome_tftotal = orfeome_tftotal[,GeneSymbol_TF:=GeneSymbol %in% na.omit(tftotal_symb[,'ALIAS'])]

orfeome_tftotal = orfeome_tftotal[,`:=`(June2016=CloneID %in% hTF_clones[,DNASU_CloneID],
                                        June2016G=GeneID %in% hTF_clones[,GeneID])]

# all the ORFeome TF clones that we haven't got yet
orfeome_miss1 = orfeome_tftotal[(GeneID_TF==TRUE | GeneSymbol_TF==TRUE) & June2016==FALSE,]

write.table(orfeome_miss1,paste0(rdata_prefix,'ORFeome8_1_addTF1.tsv'),
            sep='\t',quote=FALSE,row.names=FALSE,col.names=TRUE)

# all the ORFeome TF clones for which the TF genes we haven't got yet
orfeome_miss2 = orfeome_tftotal[(GeneID_TF==TRUE | GeneSymbol_TF==TRUE) & June2016G==FALSE & June2016==FALSE,]

write.table(orfeome_miss2,paste0(rdata_prefix,'ORFeome8_1_addTF2.tsv'),
            sep='\t',quote=FALSE,row.names=FALSE,col.names=TRUE)

write.table(orfeome_miss2[,!c("GeneID_TF","GeneSymbol_TF","June2016","June2016G"),with=FALSE],
            paste0(rdata_prefix,'ORFeome8_1_addTF3.tsv'),
            sep='\t',quote=FALSE,row.names=FALSE,col.names=TRUE)
@ 

\section{Overlap with ENCODE DREAM challenge TFs}

<<enc_tf_venn>>=
enc_ens = getBM(attributes=c("entrezgene","hgnc_symbol","description"),
                filters="hgnc_symbol",values=enc_tfs[[1]],
                mart=ensembl_h37)
enc_ens = within(enc_ens,{ entrezgene=as.character(entrezgene)})
enc_ens = merge(enc_tfs,enc_ens,by.x="V1",by.y="hgnc_symbol",all.x=TRUE)
print(dim(enc_ens))
enc_ens = enc_ens[,H1:=V1 %in% enc_h1_tfs[[1]]]
enc_ens[,.N,by="H1"]


enc_venn_list = list('ASUsent'=unique(hTF_annot4[,GeneID]),
                     'ORFeome'=unique(orfeome_table[!is.na(GeneID),GeneID]),
                     'ENC'=unique(enc_ens[,entrezgene]),
                     'ENC_H1'=unique(enc_ens[H1==TRUE,entrezgene]))

Vtf4 = Venn(enc_venn_list)
plot(Vtf4,type="ellipses")
@ 

<<ENC_TFs>>=
enctf_mat = data.frame(H1=enc_ens[,H1],
                       ASUsent=enc_ens[,entrezgene] %in% hTF_annot4[,GeneID],
                       ORFeome=enc_ens[,entrezgene] %in% orfeome_table[,GeneID]
                       )
rownames(enctf_mat) = enc_ens[,V1]

enctf_mat = enctf_mat[with(enctf_mat,order(-H1,-ASUsent,-ORFeome)),]

nmf.options(grid.patch=TRUE)# this gets rid of the first blank page in the PDF
pdf(paste0(prefix.string,'ENC_TFs.pdf'),width=2,height=4)
aheatmap(data.matrix(enctf_mat),cellwidth=5,cellheight=5,
         Colv=NA,Rowv=NA,border_color="grey50")
dev.off()
@ 

\section{Session info}

<<sessionInfo>>=
sessionInfo()
@

\end{document}


<<add_annot2>>=
# get Ensembl protein family information for those not yet have CIS-BP family annotation
hTF_fam = getBM(attributes=c("ensembl_gene_id","family"),
                filters="ensembl_gene_id",values=hTF_annot5[,ensembl_gene_id],
                mart=ensembl,uniqueRows=TRUE)
# eliminate those genes that have empty protein family annotation
hTF_fam = ddply(hTF_fam,"ensembl_gene_id",function(df) {
    subset(df,family!="")
})
@ 

<<add_annot21>>=
# get only the PTHR family ID, not subfamily
hTF_fam = within(hTF_fam,{
    PTHR_ID=str_split_fixed(family,"_",n=2)[,1]
})
# add PTHR family names
hTF_fam = merge(hTF_fam,pthr_class,all.x=TRUE)

# add PTHR family info to CIS-BP annotation
hTF_annot6 = merge(hTF_annot5,unique(hTF_fam[,c("ensembl_gene_id","PTHR_ID","PTHR_Name")]),
                   by="ensembl_gene_id",all.x=TRUE)
@ 

<<add_annot3>>=
# consolidate CIS-BP and PANTHER annotations
hTF_annot7 = ddply(hTF_annot6,c("DNASU_CloneID","RefSeq_Acc"),function(df) {
    idx = which(!is.na(df[,'TF_Name'])) # TRUE==has CIS-BP annotation
    if (length(idx)==0) {
        # does not have CIS-BP annotation but has PANTHER annotation
        idx = which(is.na(df[,'TF_Name']) & !is.na(df[,'PTHR_ID']))
        if (length(idx)==0) { # no annoation from either CIS-BP or PANTHER
            idx = which(is.na(df[,'TF_Name']))
        }
        unique(with(df[idx,], { 
            data.frame(Family_Name=NA,
                       DBDs=NA,
                       Family_Combined_ID=PTHR_ID,
                       Family_Combined_Name=PTHR_Name
                       )
        }))
    } else {
        unique(with(df[idx,], {
            data.frame(Family_Name=Family_Name,
                       DBDs=DBDs,
                       Family_Combined_ID=Family_Name,
                       Family_Combined_Name=Family_Name
                       )
        }))
    }
})    

# are all the clones annotated?
setequal(hTF_clones[,DNASU_CloneID],hTF_annot7[,'DNASU_CloneID'])
setequal(hTF_clones[,RefSeq_Acc],hTF_annot7[,'RefSeq_Acc'])
@

<<tftotal_orfeome>>=
tf_class_orfeome = tf_class_add[entrezgene %in% tf_class_mat[!ASUsent & ORFeome,entrezgene]]

tf_class_orfeome_annot = getBM(attributes=c("entrezgene","hgnc_symbol","description"),
                           filters="entrezgene",values=tf_class_psi[,entrezgene],
                           mart=ensembl_h37)

    vl = c(orfeome_venn_list,li)
    print(names(vl))
    Vtf3 = Venn(vl)
    plot(Vtf3,type="ellipses")

@ 
